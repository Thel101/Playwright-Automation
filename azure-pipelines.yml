trigger:
  - main

pool:
  vmImage: 'windows-latest'

variables:
  - group: playwright-variables - qa # Contains Azure AD B2C credentials

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js'

- script: |
    npm ci
  displayName: 'Install dependencies'

# Install browsers with system dependencies for authentication
- script: |
    npx playwright install --with-deps chromium
  displayName: 'Install Chromium for auth setup'

# Create screenshots directory
- script: |
    mkdir screenshots
  displayName: 'Create screenshots directory'
  failOnStderr: false

# Run authentication setup with improved debugging and parameters
- script: |
    npx playwright test tests/global.setup.js --project=setup --headed --timeout=180000 || echo "Auth setup failed but continuing pipeline"
    
    REM Copy any screenshots to the screenshots directory
    if exist auth-setup-error.png (
      copy auth-setup-error.png screenshots\
    )
    if exist post-login-state.png (
      copy post-login-state.png screenshots\
    )
    
    REM List files in directory for debugging
    dir
    
    REM Check if auth.json exists
    if exist auth.json (
      echo "Auth file exists, authentication was successful"
    ) else (
      echo "Auth file does not exist, authentication failed"
    )
  displayName: 'Run Authentication Setup'
  env:
    # Azure AD B2C credentials from variable group
    AZURE_AD_B2C_USERNAME: $(AZURE_AD_B2C_USERNAME)
    AZURE_AD_B2C_PASSWORD: $(AZURE_AD_B2C_PASSWORD)
    # Extended timeouts for Azure AD B2C navigation
    PLAYWRIGHT_TIMEOUT: 180000
    PLAYWRIGHT_NAVIGATION_TIMEOUT: 120000
    # Flag to indicate running in pipeline
    CI: 'true'
    # Debug logging
    DEBUG: 'pw:api'

# Capture and publish auth artifacts even if auth fails
- task: PublishPipelineArtifact@1
  condition: always()
  inputs:
    targetPath: '$(Build.SourcesDirectory)/screenshots'
    artifact: 'auth-debug-screenshots'
    publishLocation: 'pipeline'
  displayName: 'Publish Auth Debug Screenshots'
  continueOnError: true

# Install remaining browsers after auth setup - note the --force flag for Edge
- script: |
    npx playwright install firefox webkit
    npx playwright install --force msedge
  displayName: 'Install remaining browsers'
  condition: succeeded()

# Run tests with better error handling and sequential execution
- script: |
    npx playwright test tests/features/auth/login/login.spec.js --project=chrome-unauthenticated
  displayName: 'Run Chrome Login Tests'
  env:
    AZURE_AD_B2C_USERNAME: $(AZURE_AD_B2C_USERNAME)
    AZURE_AD_B2C_PASSWORD: $(AZURE_AD_B2C_PASSWORD)
    CI: 'true'
  continueOnError: true

- script: |
    npx playwright test tests/features/auth/login/login.spec.js --project=edge-unauthenticated
  displayName: 'Run Edge Login Tests'
  env:
    AZURE_AD_B2C_USERNAME: $(AZURE_AD_B2C_USERNAME)
    AZURE_AD_B2C_PASSWORD: $(AZURE_AD_B2C_PASSWORD)
    CI: 'true'
  continueOnError: true

# - script: |
#     npx playwright test tests/features/auth/login/login.spec.js --project=firefox-unauthenticated
#   displayName: 'Run Firefox Login Tests'
#   env:
#     AZURE_AD_B2C_USERNAME: $(AZURE_AD_B2C_USERNAME)
#     AZURE_AD_B2C_PASSWORD: $(AZURE_AD_B2C_PASSWORD)
#     CI: 'true'
#   continueOnError: true

# - script: |
#     npx playwright test tests/features/auth/login/login.spec.js --project=webkit-unauthenticated
#   displayName: 'Run WebKit Login Tests'
#   env:
#     AZURE_AD_B2C_USERNAME: $(AZURE_AD_B2C_USERNAME)
#     AZURE_AD_B2C_PASSWORD: $(AZURE_AD_B2C_PASSWORD)
#     CI: 'true'
#   continueOnError: true

# Only run authenticated tests if auth.json exists
- script: |
    if exist auth.json (
      echo "Auth file exists, running Chrome dashboard tests"
      npx playwright test tests/features/dashboard/navigate/dashboard.spec.js --project=chrome-authenticated
    ) else (
      echo "Auth file does not exist, skipping Chrome dashboard tests"
    )
  displayName: 'Run Chrome Dashboard Tests'
  env:
    AZURE_AD_B2C_USERNAME: $(AZURE_AD_B2C_USERNAME)
    AZURE_AD_B2C_PASSWORD: $(AZURE_AD_B2C_PASSWORD)
    CI: 'true'
  continueOnError: true

# - script: |
#     if exist auth.json (
#       echo "Auth file exists, running Edge dashboard tests"
#       npx playwright test tests/features/dashboard/navigate/dashboard.spec.js --project=edge-authenticated
#     ) else (
#       echo "Auth file does not exist, skipping Edge dashboard tests"
#     )
#   displayName: 'Run Edge Dashboard Tests'
#   env:
#     AZURE_AD_B2C_USERNAME: $(AZURE_AD_B2C_USERNAME)
#     AZURE_AD_B2C_PASSWORD: $(AZURE_AD_B2C_PASSWORD)
#     CI: 'true'
#   continueOnError: true

# - script: |
#     if exist auth.json (
#       echo "Auth file exists, running Firefox dashboard tests"
#       npx playwright test tests/features/dashboard/navigate/dashboard.spec.js --project=firefox-authenticated
#     ) else (
#       echo "Auth file does not exist, skipping Firefox dashboard tests"
#     )
#   displayName: 'Run Firefox Dashboard Tests'
#   env:
#     AZURE_AD_B2C_USERNAME: $(AZURE_AD_B2C_USERNAME)
#     AZURE_AD_B2C_PASSWORD: $(AZURE_AD_B2C_PASSWORD)
#     CI: 'true'
#   continueOnError: true

# - script: |
#     if exist auth.json (
#       echo "Auth file exists, running WebKit dashboard tests"
#       npx playwright test tests/features/dashboard/navigate/dashboard.spec.js --project=webkit-authenticated
#     ) else (
#       echo "Auth file does not exist, skipping WebKit dashboard tests"
#     )
#   displayName: 'Run WebKit Dashboard Tests'
#   env:
#     AZURE_AD_B2C_USERNAME: $(AZURE_AD_B2C_USERNAME)
#     AZURE_AD_B2C_PASSWORD: $(AZURE_AD_B2C_PASSWORD)
#     CI: 'true'
#   continueOnError: true

# - script: |
#     if exist auth.json (
#       echo "Auth file exists, running WebKit user tests"
#       npx playwright test tests/features/user/createUser.spec.js --project=chrome-authenticated
#     ) else (
#       echo "Auth file does not exist, skipping Chrome user tests"
#     )
#   displayName: 'Run Chrome User Tests'
#   env:
#     AZURE_AD_B2C_USERNAME: $(AZURE_AD_B2C_USERNAME)
#     AZURE_AD_B2C_PASSWORD: $(AZURE_AD_B2C_PASSWORD)
#     CI: 'true'
#   continueOnError: true

# Generate and publish test reports
- script: |
    npx playwright merge-reports --reporter=junit,html ./test-results
  displayName: 'Merge Test Reports'
  condition: always()
  continueOnError: true

- script: |
    npx playwright test --reporter=junit --output=test-results
  displayName: 'Run Playwright Tests (JUnit Report)'
  condition: always()
  continueOnError: true


- script: |
    node update-test-results.js
  env:
    AZURE_PAT: $(AZURE_PAT) 
  displayName: 'Upload Playwright test results to Azure DevOps Test Plans'
  continueOnError: true

- task: PublishTestResults@2
  condition: always()
  inputs:
    testRunner: JUnit
    testResultsFiles: '$(Build.SourcesDirectory)/test-results/junit-report.xml'
    testRunTitle: 'Playwright Tests'
    testRunSystem: 'Azure Pipelines'
    buildConfiguration: 'Playwright'
    mergeTestResults: true
    failTaskOnFailedTests: false
  displayName: 'Publish Test Results'

- task: PublishPipelineArtifact@1
  condition: always()
  inputs:
    targetPath: '$(Build.SourcesDirectory)/playwright-report'
    artifact: 'playwright-report'
    publishLocation: 'pipeline'
  displayName: 'Publish HTML Report'
  continueOnError: true

# Publish test-results directory
- task: PublishPipelineArtifact@1
  condition: always()
  inputs:
    targetPath: '$(Build.SourcesDirectory)/test-results'
    artifact: 'test-results'
    publishLocation: 'pipeline'
  displayName: 'Publish Test Results Directory'
  continueOnError: true


# Step 5: Run custom script to update Azure Test Plans
- script: |
    node update-test-results.js
  displayName: 'Update Azure Test Plan Cases'
